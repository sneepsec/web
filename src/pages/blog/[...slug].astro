---
import { Image, Picture } from "@astrojs/image/components";
import Authorcard from "@components/authorcard.astro";
import Container from "@components/container.astro";
import Label from "@components/ui/label.astro";
import { authors } from "@data/authors";
import { categories } from "@data/category";
import Layout from "@layouts/Layout.astro";
import { getFormattedDate } from "@utils/all";
import { CollectionEntry, getCollection } from "astro:content";

import type { Author } from "@data/authors";
import type { Category } from "@data/category";
import Humanassign from "@components/humanassign.astro";

type Props = CollectionEntry<"blog">;

export async function getStaticPaths() {
  const blog = await getCollection("blog");

  return blog.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;

const { Content, remarkPluginFrontmatter } = await post.render();

const current_authors = authors.filter((item) =>
  post.data.authors.includes(item.slug)
) as Author[];
const category = categories.find(
  (item) => item.slug === post.data.category
) as Category;
---

<Layout
  title={post.data.title}
  desc={post.data.excerpt}
  ogimage={post.data.image}>
  <Container>
    <div class="max-w-screen-md mx-auto">
      <div class="text-center">
        <Label theme={category.color}>{category.title}</Label>
      </div>

      <h1
        class="mt-2 mb-3 text-3xl font-semibold tracking-tight text-center lg:leading-snug text-brand-primary lg:text-4xl dark:text-white">
        {post.data.title}
      </h1>

      <div class="flex justify-center mt-3 space-x-3 text-gray-500">
        <div class="flex items-center gap-3">
          <div class="relative flex gap-2">
            {
              current_authors.map(
                (author) =>
                  author.image && (
                    <Image
                      src={author.image}
                      alt="Author Photo"
                      width={80}
                      height={80}
                      loading="eager"
                      class="rounded-full w-10 h-10"
                    />
                  )
              )
            }
          </div>

          <div>
            <p class="text-gray-800 dark:text-gray-400">
              {current_authors.map((author) => author.name).join(", ")}
            </p>
            <div class="flex items-center space-x-2 text-sm">
              <time
                class="text-gray-500 dark:text-gray-400"
                datetime={post.data.publishDate}>
                {getFormattedDate(post.data.publishDate)}
              </time>
              <span>
                · {Math.round(remarkPluginFrontmatter?.estReadingTime) || "5"} min
                read
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </Container>

  <div
    class="relative z-0 max-w-screen-lg mx-auto overflow-hidden lg:rounded-lg aspect-video">
    {
      post.data.image && (
        <Picture
          src={post.data.image}
          widths={[200, 400, 800]}
          sizes="(max-width: 640px) 90vw, 480px"
          aspectRatio="16:9"
          width={1024}
          height={576}
          alt="Thumbnail"
          loading="eager"
          class="w-full"
        />
      )
    }
  </div>

  <Container>
    <article class="max-w-screen-md mx-auto">
      <div
        class="mx-auto my-3 prose prose-base dark:prose-invert prose-a:text-blue-600">
        <Content />
        {post.slug == "the-social-media" && <Humanassign />}

        <div class="flex flex-wrap items-center w-full gap-3 md:w-auto">
          {
            post.data.tags.map((tag) => (
              <span class="text-sm text-gray-500">#{tag}</span>
            ))
          }
        </div>
      </div>

      <div class="flex justify-center mt-7 mb-7">
        <a
          href="/"
          class="px-5 py-3 text-sm text-blue-600 transition rounded-md dark:text-blue-500 bg-blue-50 hover:bg-blue-100">
          ← View all posts
        </a>
      </div>
      {
        current_authors.map(
          (author) => author && <Authorcard author={author} />
        )
      }
    </article>
    <div id="disqus_thread"></div>
    <script>
      /**
       *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
       *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
      /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
      (function () {
        // DON'T EDIT BELOW THIS LINE
        var d = document,
          s = d.createElement("script");
        s.src = "https://sec-io-vn.disqus.com/embed.js";
        const date = new Date();
        s.setAttribute("data-timestamp", date.toString());
        (d.head || d.body).appendChild(s);
      })();
    </script>
    <noscript
      >Please enable JavaScript to view the <a
        href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a
      ></noscript
    >
  </Container>
</Layout>
